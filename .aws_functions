# requirements
# - aws cli v2
# - jq

function aws-profiles() {
  grep "^\[profile" ~/.aws/config | awk '{print substr($2, 1, length($2)-1)}'
}

function aws-export-keys() {

  profile=$1

  if [[ -z "$profile" ]]; then
    echo "profile required"
    return 1
  fi

  sso_start_url=$(aws configure get sso_start_url --profile $profile)
  sso_role_name=$(aws configure get sso_role_name --profile $profile)
  sso_account_id=$(aws configure get sso_account_id --profile $profile)
  sso_region=$(aws configure get sso_region --profile $profile)

  # find token in cache
  token_cache_file=$(grep -l \"$sso_start_url\" ~/.aws/sso/cache/*)
  if [[ -z "$token_cache_file" ]]; then
    # need to login
    echo "you need to aws sso login first"
    return 1
  else
    access_token=$(jq -r '.accessToken' < $token_cache_file)
  fi

  creds=$(aws sso get-role-credentials \
    --profile $profile \
    --role-name $sso_role_name \
    --account-id $sso_account_id \
    --region $sso_region \
    --access-token $access_token)

  export AWS_ACCESS_KEY_ID=$(jq -r '.roleCredentials.accessKeyId' <<< $creds)
  export AWS_SECRET_ACCESS_KEY=$(jq -r '.roleCredentials.secretAccessKey' <<< $creds)
  export AWS_SESSION_TOKEN=$(jq -r '.roleCredentials.sessionToken' <<< $creds)
  export AWS_DEFAULT_REGION=$sso_region
}

function aws-sso-login() {

  if [[ -z "$1" ]]; then
    echo "profile required"
    return 1
  fi

  aws_profiles=$(aws-profiles | grep -i $1)
  sso_logged_in_urls=""

  [[ -z $aws_profiles ]] && echo "no matching profiles for $1"

  while read aws_profile; do
    echo -e "logging into \033[1m$aws_profile\033[0m"

    # get the sso_start_url for the profile and check if we need to login
    sso_start_url=$(aws configure get sso_start_url --profile $aws_profile)

    if [[ $sso_logged_in_urls == *"${sso_start_url} "* ]]; then
      echo "no login required"
    else
      aws sso login --profile $aws_profile
      sso_logged_in_urls="${sso_start_url} ${sso_logged_in_urls}"
    fi

    echo ""
  done <<< $aws_profiles
}

function aws-eks-configs() {

  if [[ -z "$1" ]]; then
    echo "profile required"
    return 1
  fi

  aws_profiles=$(aws-profiles | grep -i $1)

  [[ -z $aws_profiles ]] && echo "no matching profiles for $1"

  while read aws_profile; do
    echo -e "checking for eks clusters in \033[1m$aws_profile\033[0m"

    for eks_cluster in $(aws eks list-clusters --profile $aws_profile | jq -r '.clusters[]'); do
      aws eks update-kubeconfig \
            --name ${eks_cluster} \
            --region=ap-southeast-2 \
            --profile $aws_profile
    done
  done <<< $aws_profiles

}

function aws-ecr-get-login() {

  if [[ -z "$1" ]]; then
    echo "profile required"
    return 1
  fi

  sso_account_id=$(aws configure get sso_account_id --profile $1)
  sso_region=$(aws configure get sso_region --profile $1)
  ecr_repo=${sso_account_id}.dkr.ecr.${sso_region}.amazonaws.com

  echo -e "logging into \033[1m$ecr_repo\033[0m"
 
  aws ecr get-login-password --profile $1 | docker login --username AWS --password-stdin ${sso_account_id}.dkr.ecr.${sso_region}.amazonaws.com
}

###
# completion
###

function _aws-profile() {
  compadd `aws-profiles`
}

compdef _aws-profile aws-export-keys
compdef _aws-profile aws-sso-login
compdef _aws-profile aws-eks-configs
compdef _aws-profile aws-ecr-get-login
